// import 'package:fllutter/widgets/search_bar.dart';
// import 'package:flutter/material.dart';
// import 'package:flutter/services.dart';
// import 'package:http/http.dart' as http;
// import 'dart:convert';
// import 'package:shared_preferences/shared_preferences.dart';
// import 'package:fllutter/screens/bookDetailScreen.dart';
// import 'package:fllutter/widgets/colors.dart';

// class HomeScreen extends StatefulWidget {
//   @override
//   _HomeScreenState createState() => _HomeScreenState();
// }

// class _HomeScreenState extends State<HomeScreen> {
//   List<dynamic> books = [];
//   List<dynamic> topReads = [];
//   List<dynamic> searchResults = [];
//   bool isLoadingBooks = true;
//   bool isLoadingTopReads = true;
//   int focusedBookIndex = 0;
//   int focusedTopReadIndex = 0;
//   int focusedSubjectIndex = 0;
//   ScrollController _mainScrollController = ScrollController();
//   ScrollController _booksController = ScrollController();
//   ScrollController _topReadsController = ScrollController();
//   Map<String, List<dynamic>> _subjectBooksMap = {};
//   Map<String, ScrollController> _subjectScrollControllers = {};
//   bool isBooksRowFocused = false;
//   bool isTopReadsRowFocused = false;
//   bool isSubjectRowFocused = false;
//   String focusedSubject = '';

//   // New variables for Recent Reads
//   Future<List<dynamic>>? _recentReadsFuture;
//   List<dynamic> recentReads = [];
//   int focusedRecentReadIndex = 0;
//   bool isRecentReadsRowFocused = true;
//   ScrollController _recentReadsController = ScrollController();
//   bool isInitialLoad = true;

//   bool _isActive = true; // Track if HomeScreen is active
//   bool isSearching = false;

//   // FocusNode for the search bar
//   FocusNode searchBarFocusNode = FocusNode();
//   FocusNode dropdownFocusNode = FocusNode();
//   FocusNode _rawKeyboardListenerFocusNode = FocusNode();

//   @override
//   void initState() {
//     super.initState();
//     fetchBooks();
//     fetchTopReads();
//     _recentReadsFuture = fetchRecentReads();
//     _loadRecentReads();
//   }

//   @override
//   void dispose() {
//     _booksController.dispose();
//     _topReadsController.dispose();
//     _recentReadsController.dispose();
//     _mainScrollController.dispose();
//     searchBarFocusNode.dispose();
//     dropdownFocusNode.dispose();
//     _rawKeyboardListenerFocusNode.dispose();
//     super.dispose();
//   }

//   void _onFocusChange(bool isFocused) {
//     setState(() {
//       _isActive = isFocused;
//       print("HomeScreen active: $_isActive"); // Debug statement
//     });
//   }

//   void _onSearchResults(List<dynamic> results) {
//     setState(() {
//       searchResults = results;
//       isSearching = results.isNotEmpty;
//     });
//   }

//   void _loadRecentReads() async {
//     try {
//       recentReads = await _recentReadsFuture!;
//       setState(() {
//         isInitialLoad = false; // Disable initial loading state
//       });
//     } catch (e) {
//       print('Failed to load recent reads: $e');
//       setState(() {
//         isInitialLoad = false; // Ensure the loading indicator is removed
//       });
//     }
//   }

//   Future<void> fetchBooks() async {
//     try {
//       final response = await http.get(
//           Uri.parse('https://pl-api.iiit.ac.in/rcts/ETL-PE-003/info/allBooks'));
//       if (response.statusCode == 200) {
//         List<dynamic> fetchedBooks = json.decode(response.body);
//         Map<String, List<dynamic>> subjectBooksMap = {};

//         for (var book in fetchedBooks) {
//           String subject = book['subject'];
//           if (subjectBooksMap.containsKey(subject)) {
//             subjectBooksMap[subject]!.add(book);
//           } else {
//             subjectBooksMap[subject] = [book];
//           }
//         }

//         subjectBooksMap.keys.forEach((subject) {
//           _subjectScrollControllers[subject] = ScrollController();
//         });

//         setState(() {
//           books = fetchedBooks;
//           isLoadingBooks = false;
//           _subjectBooksMap = subjectBooksMap;
//         });
//       } else {
//         throw Exception('Failed to load books');
//       }
//     } catch (e) {
//       print('Error fetching books: $e');
//       setState(() {
//         isLoadingBooks = false;
//       });
//     }
//   }

//   Future<void> fetchTopReads() async {
//     try {
//       final response = await http.get(
//           Uri.parse('https://pl-api.iiit.ac.in/rcts/ETL-PE-003/info/topReads'));
//       if (response.statusCode == 200) {
//         setState(() {
//           topReads = json.decode(response.body);
//           isLoadingTopReads = false;
//         });
//       } else {
//         throw Exception('Failed to load top reads');
//       }
//     } catch (e) {
//       print('Error fetching top reads: $e');
//       setState(() {
//         isLoadingTopReads = false;
//       });
//     }
//   }

//   Future<List<dynamic>> fetchRecentReads() async {
//     final prefs = await SharedPreferences.getInstance();
//     final username = prefs.getString('username');

//     if (username == null) {
//       throw Exception('Username not found in local storage.');
//     }

//     final response = await http.get(
//       Uri.parse(
//           'https://pl-api.iiit.ac.in/rcts/ETL-PE-003/info/recentReads?username=$username'),
//     );

//     if (response.statusCode == 200) {
//       final List<dynamic> data = json.decode(response.body);
//       return data;
//     } else {
//       throw Exception('Failed to load recent reads');
//     }
//   }

//   void scrollLeft() {
//     setState(() {
//       print("scrollLeft called"); // Debug statement
//       if (isRecentReadsRowFocused) {
//         print("Focus is on Recent Reads Row");
//         if (focusedRecentReadIndex > 0) {
//           focusedRecentReadIndex--;
//           _scrollToRecentRead(focusedRecentReadIndex);
//         }
//       } else if (isBooksRowFocused) {
//         print("Focus is on Books Row");
//         if (focusedBookIndex > 0) {
//           focusedBookIndex--;
//           _scrollToBook(focusedBookIndex);
//         }
//       } else if (isTopReadsRowFocused) {
//         print("Focus is on Top Reads Row");
//         if (focusedTopReadIndex > 0) {
//           focusedTopReadIndex--;
//           _scrollToTopRead(focusedTopReadIndex);
//         }
//       } else if (isSubjectRowFocused) {
//         print("Focus is on Subject Row");
//         if (focusedBookIndex > 0 &&
//             _subjectBooksMap.containsKey(focusedSubject)) {
//           focusedBookIndex--;
//           _scrollToSubjectBook(focusedSubject, focusedBookIndex);
//         }
//       }
//     });
//   }

//   void scrollRight() {
//     setState(() {
//       print("scrollRight called"); // Debug statement
//       if (isRecentReadsRowFocused) {
//         print("Focus is on Recent Reads Row");
//         if (focusedRecentReadIndex < recentReads.length - 1) {
//           focusedRecentReadIndex++;
//           _scrollToRecentRead(focusedRecentReadIndex);
//         }
//       } else if (isBooksRowFocused) {
//         print("Focus is on Books Row");
//         if (focusedBookIndex < books.length - 1) {
//           focusedBookIndex++;
//           _scrollToBook(focusedBookIndex);
//         }
//       } else if (isTopReadsRowFocused) {
//         print("Focus is on Top Reads Row");
//         if (focusedTopReadIndex < topReads.length - 1) {
//           focusedTopReadIndex++;
//           _scrollToTopRead(focusedTopReadIndex);
//         }
//       } else if (isSubjectRowFocused) {
//         print("Focus is on Subject Row");
//         if (focusedBookIndex < _subjectBooksMap[focusedSubject]!.length - 1) {
//           focusedBookIndex++;
//           _scrollToSubjectBook(focusedSubject, focusedBookIndex);
//         }
//       }
//     });
//   }

//   void _scrollToRecentRead(int index) {
//     print("Scrolling to recent read at index: $index"); // Debug statement
//     _recentReadsController.animateTo(
//       index * 150.0, // Adjust the multiplier to fit your item width
//       duration: Duration(milliseconds: 300),
//       curve: Curves.easeInOut,
//     );
//   }

//   void _scrollToBook(int index) {
//     print("Scrolling to book at index: $index"); // Debug statement
//     _booksController.animateTo(
//       index * 150.0,
//       duration: Duration(milliseconds: 300),
//       curve: Curves.easeInOut,
//     );
//   }

//   void _scrollToTopRead(int index) {
//     print("Scrolling to top read at index: $index"); // Debug statement
//     _topReadsController.animateTo(
//       index * 150.0,
//       duration: Duration(milliseconds: 300),
//       curve: Curves.easeInOut,
//     );
//   }

//   void _scrollToSubjectBook(String subject, int index) {
//     print("Scrolling to subject book in $subject at index: $index"); // Debug statement
//     _subjectScrollControllers[subject]?.animateTo(
//       index * 150.0,
//       duration: Duration(milliseconds: 300),
//       curve: Curves.easeInOut,
//     );
//   }

//   void _scrollToFocusedSection(double offset) {
//     print("Scrolling to focused section at offset: $offset"); // Debug statement
//     if (_mainScrollController.hasClients) {
//       _mainScrollController.animateTo(
//         offset,
//         duration: Duration(milliseconds: 300), // Increased for smoother animation
//         curve: Curves.easeInOut,
//       );
//     }
//   }

//   void handleKeyEvent(RawKeyEvent event) {
//     if (_isActive && event is RawKeyDownEvent) {
//       print("Key pressed: ${event.logicalKey.keyLabel}"); // Debug statement
//       switch (event.logicalKey.keyLabel) {
//         case 'Arrow Left':
//           if (searchBarFocusNode.hasFocus || dropdownFocusNode.hasFocus) {
//             print("Focus is within Search Bar, shifting to Search Input");
//             FocusScope.of(context).requestFocus(searchBarFocusNode);
//           } else {
//             scrollLeft();
//           }
//           break;
//         case 'Arrow Right':
//           if (searchBarFocusNode.hasFocus) {
//             print("Focus is on Search Bar, shifting to Dropdown");
//             FocusScope.of(context).requestFocus(dropdownFocusNode);
//           } else {
//             scrollRight();
//           }
//           break;
//         case 'Arrow Up':
//           handleArrowUp();
//           break;
//         case 'Arrow Down':
//           handleArrowDown();
//           break;
//         case 'Enter':
//         case 'Select':
//           handleSelect();
//           break;
//         default:
//           print('Unhandled key: ${event.logicalKey.debugName}');
//           break;
//       }
//     }
//   }

//   void handleArrowUp() {
//   print("Arrow Up Pressed"); // Debug statement
//   setState(() {
//     if (dropdownFocusNode.hasFocus) {
//       print("Focus is on Dropdown, shifting to Search Bar");
//       FocusScope.of(context).requestFocus(searchBarFocusNode);
//     } else if (searchBarFocusNode.hasFocus) {
//       print("Focus is on Search Bar, shifting to RawKeyboardListener");
//       FocusScope.of(context).requestFocus(_rawKeyboardListenerFocusNode);
//     } else if (isSubjectRowFocused) {
//       print("Focus is on Subject Row");
//       if (focusedSubjectIndex > 0) {
//         focusedSubjectIndex--;
//         focusedSubject = _subjectBooksMap.keys.toList()[focusedSubjectIndex];
//         focusedBookIndex = 0;
//         _scrollToFocusedSection(_calculateOffsetForSubject(focusedSubjectIndex)); // Adjusted to use calculated offset
//       } else {
//         print("Shifting focus to Top Reads Row");
//         isSubjectRowFocused = false;
//         isTopReadsRowFocused = true;
//         _scrollToFocusedSection(_calculateOffsetForTopReads()); // Adjusted to use calculated offset
//       }
//     } else if (isTopReadsRowFocused) {
//       print("Focus is on Top Reads Row, shifting to Books Row");
//       isTopReadsRowFocused = false;
//       isBooksRowFocused = true;
//       _scrollToFocusedSection(_calculateOffsetForBooks()); // Adjusted to use calculated offset
//     } else if (isBooksRowFocused) {
//       print("Focus is on Books Row, shifting to Recent Reads Row");
//       isBooksRowFocused = false;
//       isRecentReadsRowFocused = true;
//       _scrollToFocusedSection(_calculateOffsetForRecentReads()); // Adjusted to use calculated offset
//     } else if (isRecentReadsRowFocused) {
//       print("Focus is on Recent Reads Row, shifting to Search Bar");
//       isRecentReadsRowFocused = false;
//       FocusScope.of(context).requestFocus(searchBarFocusNode);
//     }
//   });
// }

// double _calculateOffsetForSubject(int index) {
//   return 600.0 + (index * 280.0); // Adjust as necessary for subject section offsets
// }

// double _calculateOffsetForTopReads() {
//   return 450.0; // Adjust as necessary for top reads section offset
// }

// double _calculateOffsetForBooks() {
//   return 300.0; // Adjust as necessary for books section offset
// }

// double _calculateOffsetForRecentReads() {
//   return 150.0; // Adjust as necessary for recent reads section offset
// }






//   void handleArrowDown() {
//     print("Arrow Down Pressed"); // Debug statement
//     setState(() {
//       if (searchBarFocusNode.hasFocus || dropdownFocusNode.hasFocus) {
//         print("Focus is on Search Bar or Dropdown, shifting to Recent Reads Row");
//         isRecentReadsRowFocused = true;
//         FocusScope.of(context).requestFocus(_rawKeyboardListenerFocusNode);
//         _scrollToFocusedSection(150.0); // Adjust as needed
//       } else if (isRecentReadsRowFocused) {
//         print("Focus is on Recent Reads Row, shifting to Books Row");
//         isRecentReadsRowFocused = false;
//         isBooksRowFocused = true;
//         _scrollToFocusedSection(150.0); // Adjust as needed
//       } else if (isBooksRowFocused) {
//         print("Focus is on Books Row, shifting to Top Reads Row");
//         isBooksRowFocused = false;
//         isTopReadsRowFocused = true;
//         _scrollToFocusedSection(300.0); // Adjust as needed
//       } else if (isTopReadsRowFocused) {
//         print("Focus is on Top Reads Row, shifting to Subject Row");
//         isTopReadsRowFocused = false;
//         isSubjectRowFocused = true;
//         focusedSubject = _subjectBooksMap.keys.toList()[focusedSubjectIndex];
//         _scrollToFocusedSection(450.0); // Adjust as needed
//       } else if (isSubjectRowFocused) {
//         print("Focus is on Subject Row");
//         if (focusedSubjectIndex < _subjectBooksMap.keys.length - 1) {
//           focusedSubjectIndex++;
//           focusedSubject = _subjectBooksMap.keys.toList()[focusedSubjectIndex];
//           _scrollToFocusedSection(
//               (focusedSubjectIndex + 1) * 280.0); // Adjust as needed
//         }
//       }
//     });
//   }

//   void handleSelect() {
//     print("Enter or Select key pressed"); // Debug statement
//     if (isBooksRowFocused && focusedBookIndex != -1) {
//       print("Navigating to Book Details Screen for selected book");
//       Navigator.push(
//         context,
//         MaterialPageRoute(
//           builder: (context) => BookDetailsScreen(
//             book: books[focusedBookIndex],
//             onBookRead: _loadRecentReads, // Callback to refresh recent reads
//           ),
//         ),
//       );
//     } else if (isTopReadsRowFocused && focusedTopReadIndex != -1) {
//       print("Navigating to Book Details Screen for selected top read");
//       Navigator.push(
//         context,
//         MaterialPageRoute(
//           builder: (context) => BookDetailsScreen(
//             book: topReads[focusedTopReadIndex],
//             onBookRead: _loadRecentReads, // Callback to refresh recent reads
//           ),
//         ),
//       );
//     } else if (isRecentReadsRowFocused && focusedRecentReadIndex != -1) {
//       print("Navigating to Book Details Screen for selected recent read");
//       Navigator.push(
//         context,
//         MaterialPageRoute(
//           builder: (context) => BookDetailsScreen(
//             book: recentReads[focusedRecentReadIndex],
//             onBookRead: _loadRecentReads, // Callback to refresh recent reads
//           ),
//         ),
//       );
//     } else if (isSubjectRowFocused && focusedBookIndex != -1) {
//       print("Navigating to Book Details Screen for selected subject book");
//       Navigator.push(
//         context,
//         MaterialPageRoute(
//           builder: (context) => BookDetailsScreen(
//             book: _subjectBooksMap[focusedSubject]![focusedBookIndex],
//             onBookRead: _loadRecentReads, // Callback to refresh recent reads
//           ),
//         ),
//       );
//     }
//   }

//   @override
//   Widget build(BuildContext context) {
//     return Scaffold(
//       backgroundColor: AppColors.backgroundColor,
//       appBar: AppBar(
//         backgroundColor: AppColors.backgroundColor,
//         title: const Text(
//           'Digital Library @RCTS',
//           style: TextStyle(color: AppColors.textColor),
//         ),
//       ),
//       body: RawKeyboardListener(
//         focusNode: _rawKeyboardListenerFocusNode,
//         onKey: handleKeyEvent,
//         autofocus: true,
//         child: SingleChildScrollView(
//           controller: _mainScrollController,
//           child: Column(
//             crossAxisAlignment: CrossAxisAlignment.start,
//             children: [
//               CustomSearchBar(
//                 onSearchResults: _onSearchResults,
//                 books: books,
//                 onFocusChange: _onFocusChange,
//                 focusNode: searchBarFocusNode,
//                 dropdownFocusNode: dropdownFocusNode,
//               ),
//               if (isSearching)
//                 ...searchResults.map((book) {
//                   return GestureDetector(
//                     onTap: () {
//                       Navigator.push(
//                         context,
//                         MaterialPageRoute(
//                           builder: (context) => BookDetailsScreen(
//                             book: book,
//                             onBookRead: _loadRecentReads, // Callback to refresh recent reads
//                           ),
//                         ),
//                       );
//                     },
//                     child: _buildBookCard(book, false),
//                   );
//                 }).toList()
//               else ...[
//                 // Recent Reads Section
//                 Container(
//                   decoration: BoxDecoration(
//                     color: isRecentReadsRowFocused
//                         ? Colors.grey[800]
//                         : Colors.transparent,
//                   ),
//                   child: Column(
//                     crossAxisAlignment: CrossAxisAlignment.start,
//                     children: [
//                       const Padding(
//                         padding: EdgeInsets.all(8.0),
//                         child: Text(
//                           'Recent Reads',
//                           style: TextStyle(
//                             color: AppColors.textColor,
//                             fontSize: 20.0,
//                             fontWeight: FontWeight.bold,
//                           ),
//                         ),
//                       ),
//                       Container(
//                         height: 150.0,
//                         child: isInitialLoad
//                             ? Center(child: CircularProgressIndicator())
//                             : recentReads.isEmpty
//                                 ? Center(child: Text('No recent reads available'))
//                                 : ListView.builder(
//                                     controller: _recentReadsController,
//                                     scrollDirection: Axis.horizontal,
//                                     itemCount: recentReads.length,
//                                     itemBuilder: (context, index) {
//                                       final recentbook = recentReads[index];
//                                       return GestureDetector(
//                                         onTap: () {
//                                           Navigator.push(
//                                             context,
//                                             MaterialPageRoute(
//                                               builder: (context) =>
//                                                   BookDetailsScreen(
//                                                 book: recentbook,
//                                                 onBookRead: _loadRecentReads, // Callback to refresh recent reads
//                                               ),
//                                             ),
//                                           );
//                                         },
//                                         child: buildRecentReadsCard(
//                                           recentbook,
//                                           index == focusedRecentReadIndex &&
//                                               isRecentReadsRowFocused,
//                                         ),
//                                       );
//                                     },
//                                   ),
//                       ),
//                     ],
//                   ),
//                 ),
//                 SizedBox(height: 20),
//                 // All Books Section
//                 isLoadingBooks
//                     ? Center(child: CircularProgressIndicator())
//                     : Container(
//                         decoration: BoxDecoration(
//                           color: isBooksRowFocused
//                               ? Colors.grey[800]
//                               : Colors.transparent,
//                         ),
//                         child: Column(
//                           crossAxisAlignment: CrossAxisAlignment.start,
//                           children: [
//                             const Padding(
//                               padding: EdgeInsets.all(8.0),
//                               child: Text(
//                                 'All Books',
//                                 style: TextStyle(
//                                   color: AppColors.textColor,
//                                   fontSize: 20.0,
//                                   fontWeight: FontWeight.bold,
//                                 ),
//                               ),
//                             ),
//                             Container(
//                               height: 150.0,
//                               child: ListView.builder(
//                                 controller: _booksController,
//                                 scrollDirection: Axis.horizontal,
//                                 itemCount: books.length,
//                                 itemBuilder: (context, index) {
//                                   final book = books[index];
//                                   return GestureDetector(
//                                     onTap: () {
//                                       Navigator.push(
//                                         context,
//                                         MaterialPageRoute(
//                                           builder: (context) =>
//                                               BookDetailsScreen(book: book,
//                                               onBookRead: _loadRecentReads, // Callback to refresh recent reads
//                                               ),

//                                         ),
//                                       );
//                                     },
//                                     child: _buildBookCard(
//                                       book,
//                                       index == focusedBookIndex &&
//                                           isBooksRowFocused,
//                                     ),
//                                   );
//                                 },
//                               ),
//                             ),
//                           ],
//                         ),
//                       ),
//                 SizedBox(height: 20),
//                 // Top Reads Section
//                 Container(
//                   decoration: BoxDecoration(
//                     color: isTopReadsRowFocused
//                         ? Colors.grey[800]
//                         : Colors.transparent,
//                   ),
//                   child: Column(
//                     crossAxisAlignment: CrossAxisAlignment.start,
//                     children: [
//                       const Padding(
//                         padding: EdgeInsets.all(8.0),
//                         child: Text(
//                           'Top Reads',
//                           style: TextStyle(
//                             color: AppColors.textColor,
//                             fontSize: 20.0,
//                             fontWeight: FontWeight.bold,
//                           ),
//                         ),
//                       ),
//                       isLoadingTopReads
//                           ? Center(child: CircularProgressIndicator())
//                           : Container(
//                               height: 150.0,
//                               child: ListView.builder(
//                                 controller: _topReadsController,
//                                 scrollDirection: Axis.horizontal,
//                                 itemCount: topReads.length,
//                                 itemBuilder: (context, index) {
//                                   return GestureDetector(
//                                     onTap: () {
//                                       Navigator.push(
//                                         context,
//                                         MaterialPageRoute(
//                                           builder: (context) => BookDetailsScreen(
//                                             book: topReads[index],
//                                             onBookRead: _loadRecentReads, // Callback to refresh recent reads
//                                           ),
//                                         ),
//                                       );
//                                     },
//                                     child: _buildTopReadsCard(
//                                       topReads[index],
//                                       index == focusedTopReadIndex &&
//                                           isTopReadsRowFocused,
//                                     ),
//                                   );
//                                 },
//                               ),
//                             ),
//                     ],
//                   ),
//                 ),
//                 SizedBox(height: 20),
//                 // Books Sections for each subject
//                 if (_subjectBooksMap.isEmpty)
//                   const Center(
//                       child: Text('No books available',
//                           style: TextStyle(color: AppColors.textColor)))
//                 else
//                   ..._subjectBooksMap.entries.map((entry) {
//                     String subject = entry.key;
//                     List<dynamic> booksList = entry.value;
//                     bool isFocusedSubject =
//                         _subjectBooksMap.keys.toList().indexOf(subject) ==
//                             focusedSubjectIndex;
//                     return Container(
//                       padding: EdgeInsets.symmetric(vertical: 10.0),
//                       color: isFocusedSubject && isSubjectRowFocused
//                           ? Colors.grey[800]
//                           : Colors.transparent,
//                       child: Column(
//                         crossAxisAlignment: CrossAxisAlignment.start,
//                         children: [
//                           Padding(
//                             padding: EdgeInsets.all(8.0),
//                             child: Text(
//                               subject,
//                               style: TextStyle(
//                                 color: AppColors.textColor,
//                                 fontSize: 20.0,
//                                 fontWeight: FontWeight.bold,
//                               ),
//                             ),
//                           ),
//                           Container(
//                             height: 150.0,
//                             child: ListView.builder(
//                               controller: _subjectScrollControllers[subject],
//                               scrollDirection: Axis.horizontal,
//                               itemCount: booksList.length,
//                               itemBuilder: (context, index) {
//                                 return GestureDetector(
//                                   onTap: () {
//                                     Navigator.push(
//                                       context,
//                                       MaterialPageRoute(
//                                         builder: (context) => BookDetailsScreen(
//                                           book: booksList[index],
//                                           onBookRead: _loadRecentReads, // Callback to refresh recent reads
//                                         ),
//                                       ),
//                                     );
//                                   },
//                                   child: _buildBookCard(
//                                     booksList[index],
//                                     index == focusedBookIndex &&
//                                         isFocusedSubject &&
//                                         isSubjectRowFocused,
//                                   ),
//                                 );
//                               },
//                             ),
//                           ),
//                         ],
//                       ),
//                     );
//                   }).toList(),
//               ],
//             ],
//           ),
//         ),
//       ),
//     );
//   }







//   Widget _buildBookCard(Map<String, dynamic> book, bool isFocused) {
//     double scaleFactor =
//         isFocused ? 1.0 : 0.95; // Scale factor for focused item
//     Color borderColor = isFocused
//         ? Colors.red
//         : Colors.transparent; // Border color based on focus

//     return Padding(
//       padding: const EdgeInsets.all(10.0),
//       child: SizedBox(
//         width: 140.0, // Width of each book card
//         height: 140.0, // Height of each book card
//         child: GestureDetector(
//           // onTap: () {
//           //   print('Tapped on ${book['title']}'); // Handle tap on book item
//           //   Navigator.push(
//           //     context,
//           //     MaterialPageRoute(
//           //       builder: (context) => BookDetailsScreen(
//           //         book: book,
//           //         onBookRead: _loadRecentReads, // Callback to refresh recent reads
//           //       ),
//           //     ),
//           //   );
//           // },
//           child: AnimatedContainer(
//             duration: Duration(milliseconds: 300), // Animation duration
//             transform: Matrix4.identity()..scale(scaleFactor), // Apply scaling
//             decoration: BoxDecoration(
//               border: Border.all(color: borderColor, width: 4.0),
//               borderRadius:
//                   BorderRadius.circular(2.0), // Adjusted for better appearance
//               color: Colors.white,
//               boxShadow: [
//                 if (isFocused)
//                   BoxShadow(
//                     color: Colors.grey.withOpacity(0.5),
//                     spreadRadius: 2,
//                     blurRadius: 5,
//                   ),
//               ],
//             ),
//             child: Column(
//               crossAxisAlignment: CrossAxisAlignment.start,
//               children: [
//                 Expanded(
//                   child: Image.network(
//                     book['coverPageURL'] ??
//                         '', // Provide a default empty string if null
//                     fit: BoxFit.cover,
//                     width: double.infinity,
//                   ),
//                 ),
//                 Padding(
//                   padding: const EdgeInsets.all(4.0),
//                   child: Text(
//                     book['title'] ??
//                         'No Title', // Provide a default value if null
//                     style: const TextStyle(
//                       fontSize: 12.0, // Increased for better readability
//                       color: Colors.black,
//                     ),
//                   ),
//                 ),
//               ],
//             ),
//           ),
//         ),
//       ),
//     );
//   }

//   Widget _buildTopReadsCard(Map<String, dynamic> topRead, bool isFocused) {
//     double scaleFactor =
//         isFocused ? 1.0 : 0.95; // Scale factor for focused item
//     Color borderColor = isFocused
//         ? Colors.red
//         : Colors.transparent; // Border color based on focus

//     return Padding(
//       padding: const EdgeInsets.all(6.0),
//       child: SizedBox(
//         width: 140.0, // Width of each top reads card
//         height: 140.0, // Height of each top reads card
//         child: GestureDetector(
//           onTap: () {
//             // Handle tap on top reads item
//             print('Tapped on ${topRead['title']}');
//           },
//           child: AnimatedContainer(
//             duration: Duration(milliseconds: 300), // Animation duration
//             transform: Matrix4.identity()..scale(scaleFactor), // Apply scaling
//             decoration: BoxDecoration(
//               border: Border.all(color: borderColor, width: 4.0),
//               borderRadius: BorderRadius.circular(2.0),
//               color: Colors.white,
//               boxShadow: [
//                 if (isFocused)
//                   BoxShadow(
//                     color: Colors.grey.withOpacity(0.5),
//                     spreadRadius: 2,
//                     blurRadius: 5,
//                   ),
//               ],
//             ),
//             child: Column(
//               crossAxisAlignment: CrossAxisAlignment.start,
//               children: [
//                 Expanded(
//                   child: Image.network(
//                     topRead['coverPageURL'],
//                     fit: BoxFit.cover,
//                     width: double.infinity,
//                   ),
//                 ),
//                 Padding(
//                   padding: const EdgeInsets.all(8.0),
//                   child: Text(
//                     topRead['title'],
//                     style: TextStyle(
//                       fontSize: 10.0,
//                       color: Colors.black,
//                     ),
//                   ),
//                 ),
//               ],
//             ),
//           ),
//         ),
//       ),
//     );
//   }

//   Widget buildRecentReadsCard(dynamic recentbook, bool isFocused) {
//     double scaleFactor =
//         isFocused ? 1.0 : 0.95; // Scale factor for focused item
//     Color borderColor = isFocused
//         ? Colors.red
//         : Colors.transparent; // Border color based on focus

//     return Padding(
//       padding: const EdgeInsets.all(6.0),
//       child: SizedBox(
//         width: 140.0, // Width of each top reads card
//         height: 140.0, // Height of each top reads card
//         child: GestureDetector(
//           // onTap: () {
//           //   // Handle tap on top reads item
//           //   print('Tapped on ${recent['title']}');
//           // },
//           child: AnimatedContainer(
//             duration: Duration(milliseconds: 300), // Animation duration
//             transform: Matrix4.identity()..scale(scaleFactor), // Apply scaling
//             decoration: BoxDecoration(
//               border: Border.all(color: borderColor, width: 4.0),
//               borderRadius: BorderRadius.circular(2.0),
//               color: Colors.white,
//               boxShadow: [
//                 if (isFocused)
//                   BoxShadow(
//                     color: Colors.grey.withOpacity(0.5),
//                     spreadRadius: 2,
//                     blurRadius: 5,
//                   ),
//               ],
//             ),
//             child: Column(
//               crossAxisAlignment: CrossAxisAlignment.start,
//               children: [
//                 Expanded(
//                   child: Image.network(
//                     recentbook['coverPageURL'] ?? '',
//                     fit: BoxFit.cover,
//                     width: double.infinity,
//                   ),
//                 ),
//                 Padding(
//                   padding: const EdgeInsets.all(4.0),
//                   child: Text(
//                     recentbook['title'] ?? 'Unknown Title',
//                     style: const TextStyle(
//                       fontSize: 12.0, // Increased for better readability
//                       color: Colors.black,
//                     ),
//                   ),
//                 ),
//               ],
//             ),
//           ),
//         ),
//       ),
//     );
//   }
// }













// version2 with search bar


// import 'package:fllutter/screens/bookDetailScreen.dart';
// import 'package:fllutter/widgets/colors.dart';
// import 'package:flutter/material.dart';
// import 'package:http/http.dart' as http;
// import 'dart:convert';
// import 'package:shared_preferences/shared_preferences.dart';

// class HomeScreen extends StatefulWidget {
//   @override
//   _HomeScreenState createState() => _HomeScreenState();
// }

// class _HomeScreenState extends State<HomeScreen> {
//   List<dynamic> books = [];
//   List<dynamic> topReads = [];
//   // bool isLoadingBooks = true;
//   bool isLoadingTopReads = true;
//   int focusedBookIndex = 0;
//   int focusedTopReadIndex = 0;
//   int focusedSubjectIndex = 0;
//   ScrollController _mainScrollController = ScrollController();
//   // ScrollController _booksController = ScrollController();
//   ScrollController _topReadsController = ScrollController();
//   Map<String, List<dynamic>> _subjectBooksMap = {};
//   Map<String, ScrollController> _subjectScrollControllers = {};
//   // bool isBooksRowFocused = false;
//   bool isTopReadsRowFocused = false;
//   bool isSubjectRowFocused = false;
//   String focusedSubject = '';

//   // New variables for Recent Reads
//   Future<List<dynamic>>? _recentReadsFuture;
//   List<dynamic> recentReads = [];
//   int focusedRecentReadIndex = 0;
//   bool isRecentReadsRowFocused = false;
//   ScrollController _recentReadsController = ScrollController();
//   bool isInitialLoad = true;

//   bool _isActive = true; // Track if HomeScreen is active

//   // New variables for Search Bar
//   bool isSearchBarFocused = false;
//   TextEditingController _searchController = TextEditingController();
//   FocusNode _searchFocusNode = FocusNode(); // Focus node for the search bar

//   @override
//   void initState() {
//     super.initState();
//     fetchBooks();
//     fetchTopReads();
//     _recentReadsFuture = fetchRecentReads();
//     _loadRecentReads();
//   }

//   @override
//   void dispose() {
//     // _booksController.dispose();
//     _topReadsController.dispose();
//     _recentReadsController.dispose();
//     _mainScrollController.dispose();
//     _searchController.dispose();
//     _searchFocusNode.dispose(); // Dispose of the focus node
//     super.dispose();
//   }

//   void _onFocusChange(bool isFocused) {
//     setState(() {
//       _isActive = isFocused;
//     });
//   }

//   void _loadRecentReads() async {
//     try {
//       recentReads = await _recentReadsFuture!;
//       setState(() {
//         isInitialLoad = false; // Disable initial loading state
//       });
//     } catch (e) {
//       print('Failed to load recent reads: $e');
//       setState(() {
//         isInitialLoad = false; // Ensure the loading indicator is removed
//       });
//     }
//   }

//   Future<void> fetchBooks() async {
//     try {
//       final response = await http.get(
//           Uri.parse('https://pl-api.iiit.ac.in/rcts/ETL-PE-003/info/allBooks'));
//       if (response.statusCode == 200) {
//         List<dynamic> fetchedBooks = json.decode(response.body);
//         Map<String, List<dynamic>> subjectBooksMap = {};

//         for (var book in fetchedBooks) {
//           String subject = book['subject'];
//           if (subjectBooksMap.containsKey(subject)) {
//             subjectBooksMap[subject]!.add(book);
//           } else {
//             subjectBooksMap[subject] = [book];
//           }
//         }

//         subjectBooksMap.keys.forEach((subject) {
//           _subjectScrollControllers[subject] = ScrollController();
//         });

//         setState(() {
//           books = fetchedBooks;
//           // isLoadingBooks = false;
//           _subjectBooksMap = subjectBooksMap;
//         });
//       } else {
//         throw Exception('Failed to load books');
//       }
//     } catch (e) {
//       print('Error fetching books: $e');
//       setState(() {
//         // isLoadingBooks = false;
//       });
//     }
//   }

//   Future<void> fetchTopReads() async {
//     try {
//       final response = await http.get(
//           Uri.parse('https://pl-api.iiit.ac.in/rcts/ETL-PE-003/info/topReads'));
//       if (response.statusCode == 200) {
//         setState(() {
//           topReads = json.decode(response.body);
//           isLoadingTopReads = false;
//         });
//       } else {
//         throw Exception('Failed to load top reads');
//       }
//     } catch (e) {
//       print('Error fetching top reads: $e');
//       setState(() {
//         isLoadingTopReads = false;
//       });
//     }
//   }

//   Future<List<dynamic>> fetchRecentReads() async {
//     final prefs = await SharedPreferences.getInstance();
//     final username = prefs.getString('username');

//     if (username == null) {
//       throw Exception('Username not found in local storage.');
//     }

//     final response = await http.get(
//       Uri.parse(
//           'https://pl-api.iiit.ac.in/rcts/ETL-PE-003/info/recentReads?username=$username'),
//     );

//     if (response.statusCode == 200) {
//       final List<dynamic> data = json.decode(response.body);
//       return data;
//     } else {
//       throw Exception('Failed to load recent reads');
//     }
//   }

//   void scrollLeft() {
//     setState(() {
//       if (isSearchBarFocused) {
//         return;
//       } else if (isRecentReadsRowFocused) {
//         if (focusedRecentReadIndex > 0) {
//           focusedRecentReadIndex--;
//           _scrollToRecentRead(focusedRecentReadIndex);
//         }
//       }
//       // else if (isBooksRowFocused) {
//       //   if (focusedBookIndex > 0) {
//       //     focusedBookIndex--;
//       //     _scrollToBook(focusedBookIndex);
//       //   }
//       // }
//        else if (isTopReadsRowFocused) {
//         if (focusedTopReadIndex > 0) {
//           focusedTopReadIndex--;
//           _scrollToTopRead(focusedTopReadIndex);
//         }
//       } else if (isSubjectRowFocused) {
//         if (focusedBookIndex > 0 &&
//             _subjectBooksMap.containsKey(focusedSubject)) {
//           focusedBookIndex--;
//           _scrollToSubjectBook(focusedSubject, focusedBookIndex);
//         }
//       }
//     });
//   }

//   void scrollRight() {
//     setState(() {
//       if (isSearchBarFocused) {
//         return;
//       } else if (isRecentReadsRowFocused) {
//         if (focusedRecentReadIndex < recentReads.length - 1) {
//           focusedRecentReadIndex++;
//           _scrollToRecentRead(focusedRecentReadIndex);
//         }
//       }
//       //  else if (isBooksRowFocused) {
//       //   if (focusedBookIndex < books.length - 1) {
//       //     focusedBookIndex++;
//       //     _scrollToBook(focusedBookIndex);
//       //   }
//       // }
//        else if (isTopReadsRowFocused) {
//         if (focusedTopReadIndex < topReads.length - 1) {
//           focusedTopReadIndex++;
//           _scrollToTopRead(focusedTopReadIndex);
//         }
//       } else if (isSubjectRowFocused) {
//         if (focusedBookIndex < _subjectBooksMap[focusedSubject]!.length - 1) {
//           focusedBookIndex++;
//           _scrollToSubjectBook(focusedSubject, focusedBookIndex);
//         }
//       }
//     });
//   }

//   void _scrollToRecentRead(int index) {
//     _recentReadsController.animateTo(
//       index * 150.0, // Adjust the multiplier to fit your item width
//       duration: Duration(milliseconds: 300),
//       curve: Curves.easeInOut,
//     );
//   }

//   // void _scrollToBook(int index) {
//   //   _booksController.animateTo(
//   //     index * 150.0,
//   //     duration: Duration(milliseconds: 300),
//   //     curve: Curves.easeInOut,
//   //   );
//   // }

//   void _scrollToTopRead(int index) {
//     _topReadsController.animateTo(
//       index * 150.0,
//       duration: Duration(milliseconds: 300),
//       curve: Curves.easeInOut,
//     );
//   }

//   void _scrollToSubjectBook(String subject, int index) {
//     _subjectScrollControllers[subject]?.animateTo(
//       index * 150.0,
//       duration: Duration(milliseconds: 300),
//       curve: Curves.easeInOut,
//     );
//   }

//   void _scrollToFocusedSection(double offset) {
//     if (_mainScrollController.hasClients) {
//       _mainScrollController.animateTo(
//         offset,
//         duration:
//             Duration(milliseconds: 300), // Increased for smoother animation
//         curve: Curves.easeInOut,
//       );
//     }
//   }

//   void handleKeyEvent(RawKeyEvent event) {
//     if (_isActive && event.runtimeType.toString() == 'RawKeyDownEvent') {
//       switch (event.logicalKey.keyLabel) {
//         case 'Arrow Left':
//           scrollLeft();
//           break;
//         case 'Arrow Right':
//           scrollRight();
//           break;
//         case 'Arrow Up':
//           handleArrowUp();
//           break;
//         case 'Arrow Down':
//           handleArrowDown();
//           break;
//         case 'Enter':
//         case 'Select':
//           handleSelect();
//           break;
//         default:
//           print('Unhandled key: ${event.logicalKey.debugName}');
//           break;
//       }
//     }
//   }

//   void handleArrowUp() {
//     setState(() {
//       if (isSearchBarFocused) {
//         isSearchBarFocused = false;
//         // isRecentReadsRowFocused = true;
//         _scrollToFocusedSection(0); // Adjust as needed
//       } else if (isSubjectRowFocused) {
//         if (focusedSubjectIndex > 0) {
//           focusedSubjectIndex--;
//           focusedSubject = _subjectBooksMap.keys.toList()[focusedSubjectIndex];
//           focusedBookIndex = 0;
//           _scrollToFocusedSection(
//               (focusedSubjectIndex + 1) * 260.0); // Adjust as needed
//         } else {
//           isSubjectRowFocused = false;
//           isTopReadsRowFocused = true;
//           _scrollToFocusedSection(250.0); // Adjust as needed
//         }
//       } 
//       else if (isTopReadsRowFocused) {
//         isTopReadsRowFocused = false;
//         isRecentReadsRowFocused = true;
//         _scrollToFocusedSection(80.0); // Adjust as needed
//       } 
//       // else if (isBooksRowFocused) {
//       //   isBooksRowFocused = false;
//       //   isRecentReadsRowFocused = true;
//       //   _scrollToFocusedSection(80.0); // Adjust as needed
//       // } 
//       else if (isRecentReadsRowFocused) {
//         isRecentReadsRowFocused = false;
//         isSearchBarFocused = true;
//         _scrollToFocusedSection(0); // Adjust as needed
//       }
//     });
//   }

//   void handleArrowDown() {
//     setState(() {
//       if (isSearchBarFocused) {
//         isSearchBarFocused = false;
//         isRecentReadsRowFocused = true;
//         _scrollToFocusedSection(100.0); // Adjust as needed
//       }
//        else if (isRecentReadsRowFocused) {
//         isRecentReadsRowFocused = false;
//         isTopReadsRowFocused = true;
//         _scrollToFocusedSection(200.0); // Adjust as needed
//       }
//       //  else if (isBooksRowFocused) {
//       //   isBooksRowFocused = false;
//       //   isTopReadsRowFocused = true;
//       //   _scrollToFocusedSection(450.0); // Adjust as needed
//       // }
//        else if (isTopReadsRowFocused) {
//         isTopReadsRowFocused = false;
//         isSubjectRowFocused = true;
//         focusedSubject = _subjectBooksMap.keys.toList()[focusedSubjectIndex];
//         _scrollToFocusedSection(400.0); // Adjust as needed
//       } else if (isSubjectRowFocused) {
//         if (focusedSubjectIndex < _subjectBooksMap.keys.length - 1) {
//           focusedSubjectIndex++;
//           focusedSubject = _subjectBooksMap.keys.toList()[focusedSubjectIndex];
//           _scrollToFocusedSection(
//               (focusedSubjectIndex + 1) * 250.0); // Adjust as needed
//         }
//       } else {
//         // If none of the rows are focused, focus the search bar
//         isSearchBarFocused = true;
//         _scrollToFocusedSection(0); // Adjust as needed
//       }
//     });
//   }

//   void handleSelect() {
//     if (isSearchBarFocused) {
//       FocusScope.of(context)
//           .requestFocus(_searchFocusNode); // Request focus to open the keyboard
//     } 
//     // else if (isBooksRowFocused && focusedBookIndex != -1) {
//     //   Navigator.push(
//     //     context,
//     //     MaterialPageRoute(
//     //       builder: (context) => BookDetailsScreen(
//     //         book: books[focusedBookIndex],
//     //         onBookRead: _loadRecentReads, // Callback to refresh recent reads
//     //       ),
//     //     ),
//     //   );
//     // }
//      else if (isTopReadsRowFocused && focusedTopReadIndex != -1) {
//       Navigator.push(
//         context,
//         MaterialPageRoute(
//           builder: (context) => BookDetailsScreen(
//             book: topReads[focusedTopReadIndex],
//             onBookRead: _loadRecentReads, // Callback to refresh recent reads
//           ),
//         ),
//       );
//     } else if (isRecentReadsRowFocused && focusedRecentReadIndex != -1) {
//       Navigator.push(
//         context,
//         MaterialPageRoute(
//           builder: (context) => BookDetailsScreen(
//             book: recentReads[focusedRecentReadIndex],
//             onBookRead: _loadRecentReads, // Callback to refresh recent reads
//           ),
//         ),
//       );
//     } else if (isSubjectRowFocused && focusedBookIndex != -1) {
//       Navigator.push(
//         context,
//         MaterialPageRoute(
//           builder: (context) => BookDetailsScreen(
//             book: _subjectBooksMap[focusedSubject]![focusedBookIndex],
//             onBookRead: _loadRecentReads, // Callback to refresh recent reads
//           ),
//         ),
//       );
//     }
//   }

//   @override
//   Widget build(BuildContext context) {
//     return Scaffold(
//       backgroundColor: AppColors.backgroundColor,
//       appBar: AppBar(
//         backgroundColor: AppColors.backgroundColor,
//         title: const Text(
//           'Digital Library @RCTS',
//           style: TextStyle(color: AppColors.textColor),
//         ),
//       ),
//       body: RawKeyboardListener(
//         focusNode: FocusNode(),
//         onKey: handleKeyEvent,
//         autofocus: true,
//         child: SingleChildScrollView(
//           controller: _mainScrollController,
//           child: Column(
//             crossAxisAlignment: CrossAxisAlignment.start,
//             children: [
//               // Search Bar Section
//               Container(
//                 padding: EdgeInsets.all(8.0),
//                 decoration: BoxDecoration(
//                   color: isSearchBarFocused
//                       ? Colors.grey[800]
//                       : Colors.transparent,
//                 ),
//                 child: TextField(
//                   controller: _searchController,
//                   focusNode: _searchFocusNode, // Use the new focus node
//                   decoration: InputDecoration(
//                     hintText: 'Search books...',
//                     hintStyle: TextStyle(color: Colors.grey),
//                     border: OutlineInputBorder(
//                       borderRadius: BorderRadius.circular(8.0),
//                     ),
//                     filled: true,
//                     fillColor: Colors.white,
//                   ),
//                   style: TextStyle(color: Colors.black),
//                   enabled: isSearchBarFocused,
//                   onEditingComplete: () {
//                     // Perform search here
//                     print('Search for: ${_searchController.text}');
//                     FocusScope.of(context).unfocus(); // Unfocus after search
//                   },
//                 ),
//               ),
//               SizedBox(height: 20),
//               // Recent Reads Section
//               Container(
//                 decoration: BoxDecoration(
//                   color: isRecentReadsRowFocused
//                       ? Colors.grey[800]
//                       : Colors.transparent,
//                 ),
//                 child: Column(
//                   crossAxisAlignment: CrossAxisAlignment.start,
//                   children: [
//                     const Padding(
//                       padding: EdgeInsets.all(8.0),
//                       child: Text(
//                         'Recent Reads',
//                         style: TextStyle(
//                           color: AppColors.textColor,
//                           fontSize: 20.0,
//                           fontWeight: FontWeight.bold,
//                         ),
//                       ),
//                     ),
//                     Container(
//                       height: 150.0,
//                       child: isInitialLoad
//                           ? Center(child: CircularProgressIndicator())
//                           : recentReads.isEmpty
//                               ? Center(child: Text('No recent reads available'))
//                               : ListView.builder(
//                                   controller: _recentReadsController,
//                                   scrollDirection: Axis.horizontal,
//                                   itemCount: recentReads.length,
//                                   itemBuilder: (context, index) {
//                                     final recentbook = recentReads[index];
//                                     return GestureDetector(
//                                       onTap: () {
//                                         Navigator.push(
//                                           context,
//                                           MaterialPageRoute(
//                                             builder: (context) =>
//                                                 BookDetailsScreen(
//                                               book: recentbook,
//                                               onBookRead:
//                                                   _loadRecentReads, // Callback to refresh recent reads
//                                             ),
//                                           ),
//                                         );
//                                       },
//                                       child: buildRecentReadsCard(
//                                         recentbook,
//                                         index == focusedRecentReadIndex &&
//                                             isRecentReadsRowFocused,
//                                       ),
//                                     );
//                                   },
//                                 ),
//                     ),
//                   ],
//                 ),
//               ),
//               SizedBox(height: 20),
//               // All Books Section
//               // isLoadingBooks
//               //     ? Center(child: CircularProgressIndicator())
//               //     : Container(
//               //         decoration: BoxDecoration(
//               //           color: isBooksRowFocused
//               //               ? Colors.grey[800]
//               //               : Colors.transparent,
//               //         ),
//               //         child: Column(
//               //           crossAxisAlignment: CrossAxisAlignment.start,
//               //           children: [
//               //             const Padding(
//               //               padding: EdgeInsets.all(8.0),
//               //               child: Text(
//               //                 'All Books',
//               //                 style: TextStyle(
//               //                   color: AppColors.textColor,
//               //                   fontSize: 20.0,
//               //                   fontWeight: FontWeight.bold,
//               //                 ),
//               //               ),
//               //             ),
//               //             Container(
//               //               height: 150.0,
//               //               child: ListView.builder(
//               //                 controller: _booksController,
//               //                 scrollDirection: Axis.horizontal,
//               //                 itemCount: books.length,
//               //                 itemBuilder: (context, index) {
//               //                   final book = books[index];
//               //                   return GestureDetector(
//               //                     onTap: () {
//               //                       Navigator.push(
//               //                         context,
//               //                         MaterialPageRoute(
//               //                           builder: (context) => BookDetailsScreen(
//               //                             book: book,
//               //                             onBookRead:
//               //                                 _loadRecentReads, // Callback to refresh recent reads
//               //                           ),
//               //                         ),
//               //                       );
//               //                     },
//               //                     child: _buildBookCard(
//               //                       book,
//               //                       index == focusedBookIndex &&
//               //                           isBooksRowFocused,
//               //                     ),
//               //                   );
//               //                 },
//               //               ),
//               //             ),
//               //           ],
//               //         ),
//               //       ),
//               // SizedBox(height: 20),
//               // Top Reads Section
//               Container(
//                 decoration: BoxDecoration(
//                   color: isTopReadsRowFocused
//                       ? Colors.grey[800]
//                       : Colors.transparent,
//                 ),
//                 child: Column(
//                   crossAxisAlignment: CrossAxisAlignment.start,
//                   children: [
//                     const Padding(
//                       padding: EdgeInsets.all(8.0),
//                       child: Text(
//                         'Top Reads',
//                         style: TextStyle(
//                           color: AppColors.textColor,
//                           fontSize: 20.0,
//                           fontWeight: FontWeight.bold,
//                         ),
//                       ),
//                     ),
//                     isLoadingTopReads
//                         ? Center(child: CircularProgressIndicator())
//                         : Container(
//                             height: 150.0,
//                             child: ListView.builder(
//                               controller: _topReadsController,
//                               scrollDirection: Axis.horizontal,
//                               itemCount: topReads.length,
//                               itemBuilder: (context, index) {
//                                 return GestureDetector(
//                                   onTap: () {
//                                     Navigator.push(
//                                       context,
//                                       MaterialPageRoute(
//                                         builder: (context) => BookDetailsScreen(
//                                           book: topReads[index],
//                                           onBookRead:
//                                               _loadRecentReads, // Callback to refresh recent reads
//                                         ),
//                                       ),
//                                     );
//                                   },
//                                   child: _buildTopReadsCard(
//                                     topReads[index],
//                                     index == focusedTopReadIndex &&
//                                         isTopReadsRowFocused,
//                                   ),
//                                 );
//                               },
//                             ),
//                           ),
//                   ],
//                 ),
//               ),
//               SizedBox(height: 20),
//               // Books Sections for each subject
//               if (_subjectBooksMap.isEmpty)
//                 const Center(
//                     child: Text('No books available',
//                         style: TextStyle(color: AppColors.textColor)))
//               else
//                 ..._subjectBooksMap.entries.map((entry) {
//                   String subject = entry.key;
//                   List<dynamic> booksList = entry.value;
//                   bool isFocusedSubject =
//                       _subjectBooksMap.keys.toList().indexOf(subject) ==
//                           focusedSubjectIndex;
//                   return Container(
//                     padding: EdgeInsets.symmetric(vertical: 10.0),
//                     color: isFocusedSubject && isSubjectRowFocused
//                         ? Colors.grey[800]
//                         : Colors.transparent,
//                     child: Column(
//                       crossAxisAlignment: CrossAxisAlignment.start,
//                       children: [
//                         Padding(
//                           padding: EdgeInsets.all(8.0),
//                           child: Text(
//                             subject,
//                             style: TextStyle(
//                               color: AppColors.textColor,
//                               fontSize: 20.0,
//                               fontWeight: FontWeight.bold,
//                             ),
//                           ),
//                         ),
//                         Container(
//                           height: 150.0,
//                           child: ListView.builder(
//                             controller: _subjectScrollControllers[subject],
//                             scrollDirection: Axis.horizontal,
//                             itemCount: booksList.length,
//                             itemBuilder: (context, index) {
//                               return GestureDetector(
//                                 onTap: () {
//                                   Navigator.push(
//                                     context,
//                                     MaterialPageRoute(
//                                       builder: (context) => BookDetailsScreen(
//                                         book: booksList[index],
//                                         onBookRead:
//                                             _loadRecentReads, // Callback to refresh recent reads
//                                       ),
//                                     ),
//                                   );
//                                 },
//                                 child: _buildBookCard(
//                                   booksList[index],
//                                   index == focusedBookIndex &&
//                                       isFocusedSubject &&
//                                       isSubjectRowFocused,
//                                 ),
//                               );
//                             },
//                           ),
//                         ),
//                       ],
//                     ),
//                   );
//                 }).toList(),
//             ],
//           ),
//         ),
//       ),
//     );
//   }

//   Widget _buildBookCard(Map<String, dynamic> book, bool isFocused) {
//     double scaleFactor =
//         isFocused ? 1.0 : 0.95; // Scale factor for focused item
//     Color borderColor = isFocused
//         ? Colors.red
//         : Colors.transparent; // Border color based on focus

//     return Padding(
//       padding: const EdgeInsets.all(10.0),
//       child: SizedBox(
//         width: 140.0, // Width of each book card
//         height: 140.0, // Height of each book card
//         child: GestureDetector(
//           // onTap: () {
//           //   print('Tapped on ${book['title']}'); // Handle tap on book item
//           //   Navigator.push(
//           //     context,
//           //     MaterialPageRoute(
//           //       builder: (context) => BookDetailsScreen(
//           //         book: book,
//           //         onBookRead: _loadRecentReads, // Callback to refresh recent reads
//           //       ),
//           //     ),
//           //   );
//           // },
//           child: AnimatedContainer(
//             duration: Duration(milliseconds: 300), // Animation duration
//             transform: Matrix4.identity()..scale(scaleFactor), // Apply scaling
//             decoration: BoxDecoration(
//               border: Border.all(color: borderColor, width: 4.0),
//               borderRadius:
//                   BorderRadius.circular(8.0), // Adjusted for better appearance
//               color: Colors.white,
//               boxShadow: [
//                 if (isFocused)
//                   BoxShadow(
//                     color: Colors.grey.withOpacity(0.5),
//                     spreadRadius: 2,
//                     blurRadius: 5,
//                   ),
//               ],
//             ),
//             child: Column(
//               crossAxisAlignment: CrossAxisAlignment.start,
//               children: [
//                 Expanded(
//                   child: Image.network(
//                     book['coverPageURL'] ??
//                         '', // Provide a default empty string if null
//                     fit: BoxFit.cover,
//                     width: double.infinity,
//                   ),
//                 ),
//                 Padding(
//                   padding: const EdgeInsets.all(4.0),
//                   child: Text(
//                     book['title'] ??
//                         'No Title', // Provide a default value if null
//                     style: const TextStyle(
//                       fontSize: 12.0, // Increased for better readability
//                       color: Colors.black,
//                     ),
//                   ),
//                 ),
//               ],
//             ),
//           ),
//         ),
//       ),
//     );
//   }

//   Widget _buildTopReadsCard(Map<String, dynamic> topRead, bool isFocused) {
//     double scaleFactor =
//         isFocused ? 1.0 : 0.95; // Scale factor for focused item
//     Color borderColor = isFocused
//         ? Colors.red
//         : Colors.transparent; // Border color based on focus

//     return Padding(
//       padding: const EdgeInsets.all(6.0),
//       child: SizedBox(
//         width: 140.0, // Width of each top reads card
//         height: 140.0, // Height of each top reads card
//         child: GestureDetector(
//           onTap: () {
//             // Handle tap on top reads item
//             print('Tapped on ${topRead['title']}');
//           },
//           child: AnimatedContainer(
//             duration: Duration(milliseconds: 300), // Animation duration
//             transform: Matrix4.identity()..scale(scaleFactor), // Apply scaling
//             decoration: BoxDecoration(
//               border: Border.all(color: borderColor, width: 4.0),
//               borderRadius: BorderRadius.circular(2.0),
//               color: Colors.white,
//               boxShadow: [
//                 if (isFocused)
//                   BoxShadow(
//                     color: Colors.grey.withOpacity(0.5),
//                     spreadRadius: 2,
//                     blurRadius: 5,
//                   ),
//               ],
//             ),
//             child: Column(
//               crossAxisAlignment: CrossAxisAlignment.start,
//               children: [
//                 Expanded(
//                   child: Image.network(
//                     topRead['coverPageURL'],
//                     fit: BoxFit.cover,
//                     width: double.infinity,
//                   ),
//                 ),
//                 Padding(
//                   padding: const EdgeInsets.all(8.0),
//                   child: Text(
//                     topRead['title'],
//                     style: TextStyle(
//                       fontSize: 10.0,
//                       color: Colors.black,
//                     ),
//                   ),
//                 ),
//               ],
//             ),
//           ),
//         ),
//       ),
//     );
//   }

//   Widget buildRecentReadsCard(dynamic recentbook, bool isFocused) {
//     double scaleFactor =
//         isFocused ? 1.0 : 0.95; // Scale factor for focused item
//     Color borderColor = isFocused
//         ? Colors.red
//         : Colors.transparent; // Border color based on focus

//     return Padding(
//       padding: const EdgeInsets.all(6.0),
//       child: SizedBox(
//         width: 140.0, // Width of each top reads card
//         height: 140.0, // Height of each top reads card
//         child: GestureDetector(
//           // onTap: () {
//           //   // Handle tap on top reads item
//           //   print('Tapped on ${recent['title']}');
//           // },
//           child: AnimatedContainer(
//             duration: Duration(milliseconds: 300), // Animation duration
//             transform: Matrix4.identity()..scale(scaleFactor), // Apply scaling
//             decoration: BoxDecoration(
//               border: Border.all(color: borderColor, width: 4.0),
//               borderRadius: BorderRadius.circular(2.0),
//               color: Colors.white,
//               boxShadow: [
//                 if (isFocused)
//                   BoxShadow(
//                     color: Colors.grey.withOpacity(0.5),
//                     spreadRadius: 2,
//                     blurRadius: 5,
//                   ),
//               ],
//             ),
//             child: Column(
//               crossAxisAlignment: CrossAxisAlignment.start,
//               children: [
//                 Expanded(
//                   child: Image.network(
//                     recentbook['coverPageURL'] ?? '',
//                     fit: BoxFit.cover,
//                     width: double.infinity,
//                   ),
//                 ),
//                 Padding(
//                   padding: const EdgeInsets.all(4.0),
//                   child: Text(
//                     recentbook['title'] ?? 'Unknown Title',
//                     style: const TextStyle(
//                       fontSize: 12.0, // Increased for better readability
//                       color: Colors.black,
//                     ),
//                   ),
//                 ),
//               ],
//             ),
//           ),
//         ),
//       ),
//     );
//   }
// }
